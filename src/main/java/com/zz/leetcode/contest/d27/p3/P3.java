package com.zz.leetcode.contest.d27.p3;

import com.zz.util.ReadUtil;

import java.util.*;

/**
 * @author pierce
 */
public class P3 {
    public static void main(String[] args) {
        int[][] pre = ReadUtil.read("[[19,4],[19,25],[19,27],[19,18],[19,11],[19,28],[19,13],[19,14],[19,2],[19,10],[19,30],[19,6],[19,24],[19,20],[19,29],[19,1],[19,0],[19,33],[19,7],[19,22],[19,31],[19,26],[19,21],[19,17],[19,32],[19,16],[19,9],[19,3],[19,5],[19,12],[19,8],[15,4],[15,25],[15,27],[15,18],[15,11],[15,28],[15,13],[15,14],[15,2],[15,23],[15,10],[15,30],[15,6],[15,24],[15,20],[15,29],[15,1],[15,0],[15,33],[15,7],[15,22],[15,31],[15,26],[15,21],[15,32],[15,16],[15,9],[15,3],[15,5],[15,8],[4,25],[4,27],[4,18],[4,11],[4,28],[4,13],[4,14],[4,2],[4,23],[4,10],[4,30],[4,6],[4,24],[4,20],[4,1],[4,0],[4,33],[4,7],[4,22],[4,31],[4,21],[4,17],[4,32],[4,16],[4,9],[4,5],[25,27],[25,18],[25,11],[25,28],[25,14],[25,2],[25,23],[25,10],[25,30],[25,6],[25,24],[25,20],[25,29],[25,1],[25,0],[25,33],[25,7],[25,22],[25,31],[25,21],[25,17],[25,32],[25,16],[25,9],[25,3],[25,5],[25,12],[25,8],[27,18],[27,11],[27,28],[27,13],[27,14],[27,2],[27,23],[27,10],[27,30],[27,6],[27,24],[27,20],[27,29],[27,0],[27,33],[27,7],[27,22],[27,31],[27,26],[27,21],[27,32],[27,16],[27,9],[27,3],[27,5],[27,12],[27,8],[18,11],[18,28],[18,14],[18,2],[18,10],[18,30],[18,6],[18,24],[18,20],[18,29],[18,1],[18,0],[18,33],[18,7],[18,22],[18,31],[18,26],[18,21],[18,17],[18,16],[18,9],[18,3],[18,5],[18,12],[18,8],[11,28],[11,13],[11,14],[11,2],[11,23],[11,10],[11,30],[11,6],[11,24],[11,20],[11,29],[11,1],[11,0],[11,33],[11,7],[11,22],[11,31],[11,26],[11,21],[11,17],[11,32],[11,16],[11,9],[11,3],[11,5],[11,12],[11,8],[28,13],[28,14],[28,23],[28,30],[28,6],[28,24],[28,20],[28,29],[28,0],[28,33],[28,31],[28,26],[28,21],[28,17],[28,32],[28,16],[28,9],[28,3],[28,5],[28,12],[28,8],[13,14],[13,2],[13,23],[13,10],[13,30],[13,6],[13,24],[13,20],[13,1],[13,0],[13,33],[13,7],[13,31],[13,21],[13,17],[13,32],[13,16],[13,9],[13,3],[13,12],[13,8],[14,2],[14,23],[14,30],[14,6],[14,24],[14,20],[14,29],[14,1],[14,0],[14,33],[14,7],[14,22],[14,31],[14,26],[14,21],[14,17],[14,32],[14,9],[14,3],[14,5],[14,12],[14,8],[2,23],[2,10],[2,30],[2,6],[2,24],[2,20],[2,29],[2,1],[2,0],[2,33],[2,22],[2,31],[2,26],[2,21],[2,17],[2,16],[2,9],[2,3],[2,5],[2,12],[2,8],[23,10],[23,30],[23,6],[23,24],[23,20],[23,29],[23,1],[23,0],[23,33],[23,22],[23,31],[23,26],[23,21],[23,17],[23,32],[23,16],[23,9],[23,3],[23,5],[23,12],[23,8],[10,30],[10,6],[10,24],[10,20],[10,29],[10,1],[10,0],[10,33],[10,7],[10,22],[10,31],[10,26],[10,21],[10,17],[10,32],[10,16],[10,9],[10,3],[10,5],[10,12],[10,8],[30,6],[30,24],[30,20],[30,29],[30,0],[30,33],[30,7],[30,22],[30,31],[30,26],[30,21],[30,17],[30,32],[30,16],[30,9],[30,3],[30,5],[30,12],[30,8],[6,24],[6,20],[6,29],[6,1],[6,0],[6,33],[6,7],[6,22],[6,31],[6,26],[6,21],[6,17],[6,32],[6,16],[6,9],[6,3],[6,5],[6,12],[6,8],[24,20],[24,29],[24,1],[24,0],[24,33],[24,7],[24,22],[24,31],[24,26],[24,21],[24,17],[24,16],[24,9],[24,3],[24,5],[24,12],[24,8],[20,29],[20,1],[20,0],[20,33],[20,7],[20,22],[20,31],[20,26],[20,21],[20,17],[20,32],[20,16],[20,3],[20,5],[20,12],[20,8],[29,1],[29,0],[29,33],[29,7],[29,22],[29,31],[29,26],[29,21],[29,17],[29,32],[29,16],[29,9],[29,3],[29,5],[29,12],[1,0],[1,33],[1,7],[1,22],[1,26],[1,21],[1,17],[1,32],[1,16],[1,9],[1,3],[1,5],[1,12],[0,33],[0,7],[0,22],[0,31],[0,26],[0,21],[0,17],[0,32],[0,16],[0,9],[0,3],[0,12],[0,8],[33,7],[33,22],[33,31],[33,26],[33,21],[33,17],[33,16],[33,9],[33,3],[33,5],[33,8],[7,22],[7,31],[7,26],[7,21],[7,17],[7,32],[7,16],[7,9],[7,3],[7,12],[7,8],[22,31],[22,26],[22,17],[22,32],[22,16],[22,9],[22,3],[22,5],[22,12],[22,8],[31,26],[31,21],[31,17],[31,32],[31,16],[31,3],[31,12],[31,8],[26,21],[26,32],[26,16],[26,9],[26,3],[26,5],[26,12],[26,8],[21,17],[21,32],[21,16],[21,9],[21,3],[21,5],[21,12],[21,8],[17,32],[17,16],[17,9],[17,3],[17,5],[17,8],[32,16],[32,9],[32,5],[32,12],[32,8],[16,9],[16,3],[16,5],[16,12],[9,3],[9,5],[9,12],[9,8],[3,5],[3,12],[3,8],[5,12],[5,8],[12,8]]");

        int[][] que = ReadUtil.read("[[29,31],[10,22],[32,33],[4,31],[27,33],[28,2],[17,26],[31,28],[5,11],[13,27],[26,18],[32,6],[11,18],[32,28],[32,19],[24,23],[3,22],[26,30],[30,27],[25,0],[15,33],[33,19],[10,18],[27,29],[28,5],[29,31],[4,18],[32,28],[30,4],[31,23],[25,24],[27,5],[19,21],[14,15],[15,1],[15,27],[33,32],[16,27],[18,10],[10,18],[30,18],[16,4],[19,29],[10,2],[15,21],[15,16],[33,20],[32,33],[14,28],[7,24],[32,33],[26,10],[12,11],[32,33],[19,30],[21,24],[25,26],[31,33],[21,33],[6,33],[14,30],[23,33],[32,33],[17,33],[2,6],[26,7],[4,22],[22,20],[3,8],[13,21],[32,31],[33,28],[29,33],[3,14],[12,13],[21,28],[28,32],[32,17],[29,28],[14,2],[6,13],[32,1],[33,31],[1,11],[17,19],[18,28],[19,4],[20,11],[33,22],[23,31],[26,20],[18,26],[6,19],[2,4],[16,5],[32,21],[11,31],[24,33],[0,33],[12,28],[21,3],[29,16],[17,16],[33,31],[19,5],[9,20],[21,17],[22,24],[6,4],[12,5],[27,25],[25,16],[27,21],[22,17],[33,32],[22,23],[12,19],[27,31],[5,27],[15,12],[20,25],[30,31],[18,30],[12,21],[26,24],[32,33],[23,14],[9,30],[31,8],[28,20],[20,13],[29,12],[32,27],[18,6],[24,32],[20,2],[13,14],[29,27],[4,15],[32,25],[14,17],[7,10],[22,26],[2,8],[28,29],[5,28],[4,3],[21,29],[16,32],[31,28],[22,33],[29,16],[32,16],[27,4],[13,10],[31,11],[33,15],[28,32],[19,2],[20,32],[29,30],[22,18],[20,10],[31,26],[28,9],[26,20],[23,24],[21,32],[22,24],[8,6],[24,31],[26,25],[27,32],[24,1],[28,20],[32,20],[30,25],[33,32],[29,32],[31,26],[24,32],[16,15],[30,29],[12,31],[4,17],[21,1],[30,21],[12,1],[16,24],[33,8],[20,27],[32,31],[13,31],[30,33],[30,15],[26,9],[22,20],[24,30],[13,20],[32,33],[14,24],[6,23],[30,33],[27,10],[18,28],[15,33],[2,18],[10,19],[30,11],[16,30],[27,26],[20,7],[24,6],[29,25],[28,24],[7,8],[19,0],[26,9],[24,7],[14,28],[15,29],[18,23],[32,30],[29,32],[32,21],[7,5],[11,22],[32,33],[32,7],[32,17],[12,21],[16,22],[23,24],[25,24],[33,30],[27,24],[14,22],[32,27],[27,32],[3,23],[5,10],[26,28],[18,4],[33,32],[3,14],[6,22],[31,30],[21,24],[4,7],[19,16],[20,18],[13,8],[18,21],[30,33],[25,22],[30,14],[23,32],[32,5],[21,4],[22,28],[22,33],[22,24],[27,26],[32,33],[20,12],[30,32],[9,22],[32,11],[33,30],[15,7],[10,33],[32,31],[31,19],[33,28],[11,10],[24,27],[30,27],[12,6],[10,17],[22,11],[27,22],[25,20],[10,13],[31,33],[28,8],[17,21],[33,4],[11,19],[0,11],[16,2],[6,26],[31,27],[10,8],[31,33],[4,33],[8,33],[15,4],[6,20],[2,28],[17,32],[29,21],[0,5],[29,18],[1,12],[20,25],[6,21],[31,30],[6,27],[22,4],[33,29],[6,2],[28,26],[3,13],[2,8],[31,29],[26,28],[32,31],[26,20],[7,29],[12,18],[6,5],[14,30],[28,29],[24,23],[23,30],[12,32],[33,30],[0,10],[27,28],[28,18],[27,26],[22,26],[30,9],[19,22],[29,10],[12,23],[2,17],[6,28],[29,31],[29,22],[33,32],[4,11],[33,4],[31,32],[27,4],[17,23],[13,28],[8,1],[18,21],[1,0],[28,23],[1,4],[17,28],[15,27],[25,15],[31,22],[27,33],[15,32],[23,13],[28,25],[31,20],[28,30],[26,31],[17,16],[26,33],[3,5],[21,28],[21,17],[26,28],[22,18],[11,9],[20,13],[17,3],[22,20],[32,25],[28,29],[22,10],[7,15],[9,25],[24,32],[26,24],[8,23],[30,20],[12,13],[31,19],[24,21],[15,10],[13,28],[33,32],[9,15],[26,33],[21,27],[8,17],[12,29],[19,14],[25,10],[33,12],[3,20],[33,30],[13,12],[22,21],[6,24],[0,3],[28,31],[23,29],[7,23],[31,20],[28,33],[1,15],[7,25],[28,27],[29,33],[20,33],[25,7],[18,32],[29,27],[2,25],[31,26],[13,22],[10,29],[4,28],[8,16],[16,24],[0,24],[14,28],[29,25],[27,21],[33,29],[13,8],[26,33],[32,31],[28,26],[19,11],[11,12],[31,30],[23,28],[30,19],[28,25],[30,32],[25,3],[32,27],[16,29],[8,14],[17,24],[31,21],[8,32],[18,8],[31,32],[1,8],[17,9],[30,31],[19,18],[7,15],[21,5],[18,21],[14,23],[11,10],[9,2],[25,33],[17,10],[16,24],[19,22],[21,14],[25,8],[13,6],[21,20],[33,27],[33,30],[18,19],[28,3],[14,32],[25,14],[25,33],[33,9],[33,26],[26,28],[33,32],[4,11],[3,28],[31,24],[33,32],[4,14],[27,20],[30,0],[7,16],[25,19],[28,5],[31,15],[21,20],[0,21],[9,33],[19,21],[32,12],[26,9],[15,19],[27,10],[32,24],[23,28],[6,17],[11,28],[24,31],[10,28],[11,4],[26,31],[33,29],[29,6],[24,28],[8,27],[4,0],[32,13],[21,33],[21,10],[28,23],[20,26],[16,24],[11,16],[26,33],[23,4],[16,30],[23,18],[33,32],[27,28],[33,32],[27,28],[7,13],[24,10],[33,6],[22,19],[30,31],[33,30],[23,2],[7,0],[23,32],[29,30],[19,12],[8,26],[30,16],[27,30],[25,18],[21,25],[21,10],[12,10],[13,11],[5,15],[27,31],[33,28],[4,29],[32,33],[29,32],[20,22],[32,24],[17,13],[27,29],[3,31],[13,18],[16,0],[26,1],[0,20],[11,14],[33,30],[33,29],[24,8],[14,11],[33,30],[20,28],[28,31],[29,26],[33,32],[6,24],[21,13],[3,10],[16,15],[10,19],[9,17],[25,18],[9,5],[18,6],[22,32],[32,30],[22,30],[8,5],[12,27],[19,9],[12,1],[27,29],[24,28],[18,26],[16,13],[11,0],[19,28],[27,24],[22,10],[28,31],[27,20],[12,18],[13,16],[20,14],[10,20],[26,30],[30,24],[9,0],[32,33],[2,18],[22,25],[13,31],[21,23],[28,31],[32,21],[23,5],[1,21],[1,18],[8,27],[11,28],[11,17],[30,32],[32,31],[23,9],[32,13],[31,30],[19,17],[2,30],[10,20],[29,33],[28,21],[23,32],[26,28],[17,18],[13,17],[30,27],[16,19],[3,18],[23,22],[33,11],[26,20],[25,5],[9,6],[5,28],[14,27],[29,6],[26,11],[23,14],[8,6],[17,25],[24,26],[20,25],[26,32]]");
        //int[][] que = ReadUtil.read("[[29,31],[10,22],[32,33],[4,31],[27,33],[28,2],[17,26],[31,28],[5,11],[13,27],[26,18],[32,6],[11,18],[32,28],[32,19]]");

        Solution s = new Solution();

        List<Boolean> r = s.checkIfPrerequisite(34, pre, que);
        System.out.println(r);
    }
}

class Solution {

    int[][] r;
    int size;
    Set<Integer> path = new HashSet<>();

    public List<Boolean> checkIfPrerequisite(int n, int[][] prerequisites, int[][] queries) {
        size = n;
        r = new int[n][n];
        for (int[] p : prerequisites) {
            r[p[0]][p[1]] = 1;
        }

        for (int i = 0; i < size; i ++) {
            path.clear();
            t(i);
            for (int j = 0; j < size; j ++) {
                if (path.contains(j)) {
                    r[i][j] = 1;
                } else {
                    r[i][j] = -1;
                }
            }
        }


        List<Boolean> res = new ArrayList<>();
        for (int[] q : queries) {
            int x = q[0], y = q[1];
            res.add(r[x][y] == 1);
        }
        return res;
    }

    private void t(int x) {
        for (int i = 0; i < size; i ++) {
            if (r[x][i] == 1 && !path.contains(i)) {
                path.add(i);
                t(i);
            }
        }
    }

}